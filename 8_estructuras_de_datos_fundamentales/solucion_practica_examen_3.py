"""
Simulaci√≥n Interactiva de Gesti√≥n de Ecosistemas - Las Grandes Serres
=====================================================================

üéÆ DESCRIPCI√ìN DEL JUEGO:
Juego de simulaci√≥n donde el jugador gestiona invernaderos bot√°nicos
durante 10 d√≠as, manteniendo plantas vivas con recursos limitados.

üìö CONCEPTOS CLAVE DE PROGRAMACI√ìN UTILIZADOS:
- Diccionarios anidados: para representar la estructura completa del juego
- Listas: para almacenar m√∫ltiples invernaderos y plantas
- Tuplas: para representar rangos √≥ptimos (min, max)
- Bucles (for/while): para iterar sobre d√≠as, invernaderos y plantas
- Condicionales (if/elif/else): para validaciones y l√≥gica de juego
- Funciones: modularizaci√≥n del c√≥digo en funciones reutilizables
- Entrada/salida: interacci√≥n con el usuario mediante input() y print()

üóÇÔ∏è ESTRUCTURA DE DATOS PRINCIPAL:
El juego usa un diccionario principal llamado 'configuracion' con esta estructura:
{
    "recursos_globales": {
        "tanque_agua_litros": float,      # Agua total disponible (no se renueva)
        "energia_diaria_max_kwh": float,  # Energ√≠a m√°xima por d√≠a
        "energia_diaria_kwh": float       # Energ√≠a disponible hoy (se renueva cada d√≠a)
    },
    "serres": [  # Lista de invernaderos
        {
            "nombre": str,
            "ambiente": {"temperatura": float, "humedad_relativa": float},
            "especie": str,
            "requerimientos": {
                "temperatura_optima": (min, max),      # Tupla
                "humedad_suelo_optima": (min, max),    # Tupla
                "k_T": float,  # Constante de estr√©s t√©rmico
                "k_M": float   # Constante de estr√©s h√≠drico
            },
            "plantas": [  # Lista de plantas en este invernadero
                {
                    "id": str,
                    "humedad_suelo": float,
                    "salud": float,
                    "estado": str  # "viva" o "muerta"
                }
            ]
        }
    ]
}

üìê F√ìRMULA MATEM√ÅTICA PRINCIPAL:
Cambio de salud diario: ŒîH = -(k_T¬∑ŒîT¬≤ + k_M¬∑ŒîM¬≤)
Donde:
- ŒîT = desviaci√≥n t√©rmica (diferencia con temperatura √≥ptima)
- ŒîM = desviaci√≥n h√≠drica (diferencia con humedad m√≠nima √≥ptima)
- k_T, k_M = constantes de sensibilidad de cada especie

‚öôÔ∏è RESTRICCIONES:
Solo se permite importar random seg√∫n las restricciones del ejercicio.

üë®‚Äçüéì NOTA PARA ESTUDIANTES:
Este c√≥digo est√° dise√±ado con comentarios educativos para facilitar la comprensi√≥n
de c√≥mo funcionan las estructuras de datos fundamentales en Python. Se recomienda leer los
comentarios con atenci√≥n y observar c√≥mo los datos fluyen a trav√©s del programa.
"""

import random
from typing import Optional, Tuple


# =============================================================================
# CONSTANTES DEL JUEGO
# =============================================================================
# Las constantes son valores que NO cambian durante toda la ejecuci√≥n del programa.
# Se escriben en MAY√öSCULAS por convenci√≥n para identificarlas f√°cilmente.
# Usar constantes facilita ajustar el balance del juego sin buscar valores en todo el c√≥digo.

# Duraci√≥n y probabilidades
DIAS_SIMULACION = 10  # Total de d√≠as que dura la simulaci√≥n
PROBABILIDAD_EVENTO_CLIMATICO = 0.15  # 15% de probabilidad de evento clim√°tico cada d√≠a

# Costos de acciones (recursos que consume cada acci√≥n)
COSTO_CALEFACCION_KWH = 5  # kWh de energ√≠a que cuesta activar calefacci√≥n
COSTO_VENTILACION_KWH = 3  # kWh de energ√≠a que cuesta activar ventilaci√≥n
COSTO_RIEGO_LITROS_POR_10_PERCENT = 1  # Litros de agua por cada 10% de humedad a reponer

# Efectos de acciones sobre el ambiente
EFECTO_CALEFACCION_TEMP = 2.0  # ¬∞C que aumenta la temperatura con calefacci√≥n
EFECTO_VENTILACION_TEMP = -2.0  # ¬∞C que disminuye la temperatura con ventilaci√≥n
EFECTO_CALEFACCION_HUMEDAD = -5.0  # % que reduce la humedad relativa la calefacci√≥n
EFECTO_VENTILACION_HUMEDAD = 5.0  # % que aumenta la humedad relativa la ventilaci√≥n

# Par√°metros ambientales y procesos naturales
RECUPERACION_SALUD_OPTIMA = 0.5  # Puntos de salud que recupera una planta en condiciones √≥ptimas
TASA_EVAPOTRANSPIRACION_BASE = -4.0  # % de humedad que pierden las plantas normalmente
TASA_EVAPOTRANSPIRACION_AIRE_SECO = -6.0  # % de humedad que pierden con aire seco (<50% HR)
TASA_EVAPOTRANSPIRACION_AIRE_HUMEDO = -2.0  # % de humedad que pierden con aire h√∫medo (>80% HR)
FLUCTUACION_TEMPERATURA_MAX = 1.0  # ¬∞C de variaci√≥n aleatoria diaria de temperatura
EVENTO_CLIMATICO_CAMBIO_TEMP = 4.0  # ¬∞C que cambia la temperatura por evento clim√°tico


# =============================================================================
# FUNCIONES DE INICIALIZACI√ìN Y CONFIGURACI√ìN
# =============================================================================


def obtener_configuracion_facil() -> dict:
    """
    Configuraci√≥n de dificultad f√°cil con 1 invernadero y 2 plantas.

    Retorna:
        dict: Diccionario principal con la configuraci√≥n completa del juego.
              Estructura:
              {
                  "recursos_globales": dict con llaves "tanque_agua_litros" (float),
                                       "energia_diaria_max_kwh" (float),
                                       "energia_diaria_kwh" (float),
                  "serres": lista de dicts, cada uno representa un invernadero
              }

              Ejemplo de invernadero:
              {
                  "nombre": str (ej: "Serre Tropicale"),
                  "ambiente": dict con "temperatura" (float) y "humedad_relativa" (float),
                  "especie": str (ej: "Orqu√≠dea Phalaenopsis"),
                  "requerimientos": dict con tuplas de rangos √≥ptimos,
                  "plantas": lista de dicts con info de cada planta
              }
    """
    return {
        "recursos_globales": {
            "tanque_agua_litros": 320.0,
            "energia_diaria_max_kwh": 24.0,
            "energia_diaria_kwh": 24.0,
        },
        "serres": [
            {
                "nombre": "Serre Tropicale",
                "ambiente": {"temperatura": 27.0, "humedad_relativa": 75.0},
                "especie": "Orqu√≠dea Phalaenopsis",
                "requerimientos": {
                    "temperatura_optima": (24, 30),
                    "humedad_suelo_optima": (55, 75),
                    "k_T": 0.12,
                    "k_M": 0.1,
                },
                "plantas": [
                    {
                        "id": "ORQ01",
                        "humedad_suelo": 60.0,
                        "salud": 100.0,
                        "estado": "viva",
                    },
                    {
                        "id": "ORQ02",
                        "humedad_suelo": 58.0,
                        "salud": 98.0,
                        "estado": "viva",
                    },
                ],
            }
        ],
    }


def obtener_configuracion_media() -> dict:
    """
    Configuraci√≥n de dificultad media con 1 invernadero y 3 plantas.

    Retorna:
        dict: Misma estructura que obtener_configuracion_facil() pero con
              menos recursos y plantas m√°s exigentes.
    """
    return {
        "recursos_globales": {
            "tanque_agua_litros": 280.0,
            "energia_diaria_max_kwh": 20.0,
            "energia_diaria_kwh": 20.0,
        },
        "serres": [
            {
                "nombre": "Serre M√©diterran√©enne",
                "ambiente": {"temperatura": 24.0, "humedad_relativa": 55.0},
                "especie": "Lavanda y Arom√°ticas",
                "requerimientos": {
                    "temperatura_optima": (20, 27),
                    "humedad_suelo_optima": (35, 55),
                    "k_T": 0.18,
                    "k_M": 0.22,
                },
                "plantas": [
                    {
                        "id": "MED01",
                        "humedad_suelo": 42.0,
                        "salud": 92.0,
                        "estado": "viva",
                    },
                    {
                        "id": "MED02",
                        "humedad_suelo": 38.0,
                        "salud": 88.0,
                        "estado": "viva",
                    },
                    {
                        "id": "MED03",
                        "humedad_suelo": 40.0,
                        "salud": 90.0,
                        "estado": "viva",
                    },
                ],
            }
        ],
    }


def obtener_configuracion_dificil() -> dict:
    """
    Configuraci√≥n de dificultad dif√≠cil con 2 invernaderos y 4 plantas.

    Retorna:
        dict: Misma estructura que obtener_configuracion_facil() pero con
              2 invernaderos en la lista "serres" y recursos muy limitados.
    """
    return {
        "recursos_globales": {
            "tanque_agua_litros": 240.0,
            "energia_diaria_max_kwh": 18.0,
            "energia_diaria_kwh": 18.0,
        },
        "serres": [
            {
                "nombre": "Serre Xer√≥fila",
                "ambiente": {"temperatura": 36.0, "humedad_relativa": 28.0},
                "especie": "Cactus y Suculentas",
                "requerimientos": {
                    "temperatura_optima": (28, 38),
                    "humedad_suelo_optima": (8, 18),
                    "k_T": 0.25,
                    "k_M": 0.35,
                },
                "plantas": [
                    {
                        "id": "XER01",
                        "humedad_suelo": 12.0,
                        "salud": 85.0,
                        "estado": "viva",
                    },
                    {
                        "id": "XER02",
                        "humedad_suelo": 10.0,
                        "salud": 82.0,
                        "estado": "viva",
                    },
                ],
            },
            {
                "nombre": "Serre Nebulosa",
                "ambiente": {"temperatura": 21.0, "humedad_relativa": 88.0},
                "especie": "Nepenthes y Plantas Carn√≠voras",
                "requerimientos": {
                    "temperatura_optima": (18, 26),
                    "humedad_suelo_optima": (65, 85),
                    "k_T": 0.3,
                    "k_M": 0.28,
                },
                "plantas": [
                    {
                        "id": "NEB01",
                        "humedad_suelo": 70.0,
                        "salud": 78.0,
                        "estado": "viva",
                    },
                    {
                        "id": "NEB02",
                        "humedad_suelo": 68.0,
                        "salud": 80.0,
                        "estado": "viva",
                    },
                ],
            },
        ],
    }


def mostrar_introduccion_juego():
    """
    Muestra las instrucciones iniciales del juego.

    Esta funci√≥n no recibe par√°metros ni retorna nada.
    Solo imprime en pantalla el texto de bienvenida.
    """
    # Crear una l√≠nea decorativa repitiendo el emoji 20 veces
    print("\n" + "üåø" * 20)
    print("BIENVENIDA A LAS GRANDES SERRES DU JARDIN DES PLANTES")
    print("üåø" * 20)
    print("\nüéØ OBJETIVO:")
    print("Mant√©n vivas el m√°ximo n√∫mero de plantas durante 10 d√≠as")
    print("\nüõ†Ô∏è C√ìMO JUGAR:")
    print("1. Cada d√≠a recibir√°s un reporte del estado de tus invernaderos")
    print("2. Analiza la temperatura, humedad y salud de las plantas")
    print("3. Ejecuta acciones para mejorar las condiciones")
    print("4. Gestiona tus recursos limitados de agua y energ√≠a")
    print("\n‚ú® CONSEJOS IMPORTANTES:")
    print("‚Ä¢ Usa 'condiciones' para ver los requisitos √≥ptimos de cada planta")
    print("‚Ä¢ Usa 'ayuda' para recordar los comandos disponibles")
    print("‚Ä¢ ¬°La prevenci√≥n es mejor que la curaci√≥n!")
    print("\n" + "-" * 60)


def seleccionar_configuracion() -> Optional[dict]:
    """
    Permite a la persona jugadora seleccionar la dificultad del juego.

    Retorna:
        dict | None: Si selecciona opci√≥n 1-3, retorna dict de configuraci√≥n.
                     Si selecciona opci√≥n 4 (Salir), retorna None.
                     La estructura del dict es la misma que obtener_configuracion_facil().
    """
    print("üåø BIENVENIDA A LAS GRANDES SERRES DU JARDIN DES PLANTES üåø")
    print("=" * 60)
    print("Seleccione el nivel de dificultad:")
    print("1. F√°cil - 1 invernadero, 2 plantas, recursos generosos")
    print("2. Medio - 1 invernadero, 3 plantas, recursos balanceados")
    print("3. Dif√≠cil - 2 invernaderos, recursos ajustados")
    print("4. Salir")

    while True:
        try:
            opcion = input("\nIngrese su opci√≥n (1-4): ").strip()
            if opcion == "1":
                print("üü¢ Dificultad F√ÅCIL seleccionada")
                return obtener_configuracion_facil()
            elif opcion == "2":
                print("üü° Dificultad MEDIA seleccionada")
                return obtener_configuracion_media()
            elif opcion == "3":
                print("üî¥ Dificultad DIF√çCIL seleccionada")
                return obtener_configuracion_dificil()
            elif opcion == "4":
                print("üëã ¬°Hasta pronto!")
                return None
            else:
                print("‚ùå Opci√≥n inv√°lida. Ingrese 1, 2, 3 o 4.")
        except (ValueError, KeyboardInterrupt):
            print("‚ùå Entrada inv√°lida. Intente nuevamente.")


# =============================================================================
# FUNCIONES DE C√ÅLCULO DE SALUD Y ESTR√âS
# =============================================================================


def calcular_desviacion_termica(
    temperatura_actual: float, rango_optimo: Tuple[float, float]
) -> float:
    """
    Calcula la desviaci√≥n t√©rmica seg√∫n las condiciones √≥ptimas.

    Par√°metros:
        temperatura_actual: float, temperatura en grados Celsius (ej: 27.5)
        rango_optimo: tupla de 2 floats (min, max), ej: (24.0, 30.0)

    Retorna:
        float: Desviaci√≥n t√©rmica ŒîT
               - 0.0 si la temperatura est√° dentro del rango √≥ptimo
               - Valor positivo indicando cu√°ntos grados falta o sobra

    Ejemplo:
        calcular_desviacion_termica(22.0, (24.0, 30.0)) -> 2.0 (falta 2¬∞C)
        calcular_desviacion_termica(27.0, (24.0, 30.0)) -> 0.0 (est√° OK)
    """
    # Desempaquetar la tupla en dos variables
    temp_min, temp_max = rango_optimo

    # Caso 1: La temperatura est√° en el rango √≥ptimo -> no hay desviaci√≥n
    if temp_min <= temperatura_actual <= temp_max:
        return 0.0
    # Caso 2: Hace demasiado fr√≠o -> calcular cu√°nto falta para llegar al m√≠nimo
    elif temperatura_actual < temp_min:
        return temp_min - temperatura_actual
    # Caso 3: Hace demasiado calor -> calcular cu√°nto sobra del m√°ximo
    else:  # temperatura_actual > temp_max
        return temperatura_actual - temp_max


def calcular_desviacion_hidrica(
    humedad_suelo_actual: float, rango_optimo: Tuple[float, float]
) -> float:
    """
    Calcula la desviaci√≥n h√≠drica seg√∫n las condiciones √≥ptimas.

    Par√°metros:
        humedad_suelo_actual: float, porcentaje de humedad (0-100), ej: 45.5
        rango_optimo: tupla de 2 floats (min, max), ej: (55.0, 75.0)

    Retorna:
        float: Desviaci√≥n h√≠drica ŒîM
               - 0.0 si la humedad est√° por encima del m√≠nimo
               - Valor positivo indicando cu√°nta humedad falta

    Nota: Solo nos importa el m√≠nimo, por eso usamos _ para ignorar el m√°ximo.
    """
    # Desempaquetar solo el m√≠nimo, ignorar el m√°ximo con _
    humedad_min, _ = rango_optimo

    # Si tiene suficiente agua (‚â• m√≠nimo) -> no hay desviaci√≥n
    if humedad_suelo_actual >= humedad_min:
        return 0.0
    # Si le falta agua (< m√≠nimo) -> calcular cu√°nta falta
    else:
        return humedad_min - humedad_suelo_actual


def calcular_cambio_salud(planta: dict, ambiente: dict, requerimientos: dict) -> float:
    """
    Calcula el cambio diario en la salud de una planta.
    Implementa la f√≥rmula: ŒîH = -(k_T¬∑ŒîT¬≤ + k_M¬∑ŒîM¬≤)

    Par√°metros:
        planta: dict con llaves "id" (str), "humedad_suelo" (float),
                "salud" (float), "estado" (str: "viva" o "muerta")
                Ejemplo: {"id": "ORQ01", "humedad_suelo": 60.0, "salud": 85.0, "estado": "viva"}

        ambiente: dict con llaves "temperatura" (float) y "humedad_relativa" (float)
                  Ejemplo: {"temperatura": 27.0, "humedad_relativa": 75.0}

        requerimientos: dict con llaves "temperatura_optima" (tupla),
                        "humedad_suelo_optima" (tupla), "k_T" (float), "k_M" (float)
                        Ejemplo: {"temperatura_optima": (24, 30), "k_T": 0.12, ...}

    Retorna:
        float: Cambio en salud (puede ser positivo o negativo)
               - Positivo: la planta se recupera (+0.5 si est√° en condiciones √≥ptimas)
               - Negativo: la planta pierde salud por estr√©s
    """
    # Si la planta ya muri√≥, no hay cambios
    if planta["estado"] == "muerta":
        return 0.0

    # Calcular desviaciones usando las funciones auxiliares
    delta_t = calcular_desviacion_termica(
        ambiente["temperatura"], requerimientos["temperatura_optima"]
    )
    delta_m = calcular_desviacion_hidrica(
        planta["humedad_suelo"], requerimientos["humedad_suelo_optima"]
    )

    # Caso especial: Si est√° en condiciones √≥ptimas, se recupera
    if delta_t == 0.0 and delta_m == 0.0:
        return RECUPERACION_SALUD_OPTIMA  # +0.5 puntos de salud

    # Caso general: Calcular da√±o por estr√©s usando la f√≥rmula del enunciado
    # ŒîH = -(k_T¬∑ŒîT¬≤ + k_M¬∑ŒîM¬≤)
    k_t = requerimientos["k_T"]  # Constante de sensibilidad t√©rmica
    k_m = requerimientos["k_M"]  # Constante de sensibilidad h√≠drica
    danio = -(k_t * (delta_t**2) + k_m * (delta_m**2))

    return danio  # Ser√° un n√∫mero negativo (p√©rdida de salud)


def actualizar_salud_plantas(configuracion: dict) -> None:
    """
    Actualiza la salud de todas las plantas en todos los invernaderos.

    Par√°metros:
        configuracion: dict, el diccionario principal del juego con estructura:
                       {"recursos_globales": {...}, "serres": [...]}

    Esta funci√≥n no retorna nada (None), pero modifica directamente
    los valores de "salud" y "estado" de las plantas dentro de configuracion.
    """
    # Lista para acumular las plantas que mueran durante la actualizaci√≥n
    plantas_muertas = []

    # Recorrer cada invernadero en la lista de invernaderos
    for serre in configuracion["serres"]:
        # Extraer los datos necesarios del invernadero actual
        ambiente = serre["ambiente"]
        requerimientos = serre["requerimientos"]

        # Recorrer cada planta dentro de este invernadero
        for planta in serre["plantas"]:
            # Solo procesar plantas vivas
            if planta["estado"] == "viva":
                # Calcular cu√°nto cambia la salud hoy
                cambio_salud = calcular_cambio_salud(planta, ambiente, requerimientos)

                # Actualizar la salud: sumar el cambio (puede ser + o -)
                # Usar max/min para mantener salud entre 0 y 100
                planta["salud"] = max(0.0, min(100.0, planta["salud"] + cambio_salud))

                # Verificar si la planta muri√≥ (salud lleg√≥ a 0 o menos)
                if planta["salud"] <= 0.0:
                    planta["estado"] = "muerta"  # Cambiar estado
                    # Guardar info para notificar despu√©s
                    plantas_muertas.append((serre["nombre"], planta["id"]))

    # Notificar al jugador sobre plantas que murieron hoy
    for nombre_serre, planta_id in plantas_muertas:
        print(f"üíÄ La planta {planta_id} en {nombre_serre} ha muerto.")


# =============================================================================
# FUNCIONES DE EVENTOS CLIM√ÅTICOS Y CAMBIOS AMBIENTALES
# =============================================================================


def generar_evento_climatico() -> str:
    """
    Genera un evento clim√°tico aleatorio.

    Retorna:
        str | None: "ola_frio" o "dia_soleado" si ocurre un evento (15% probabilidad)
                    None si no ocurre ning√∫n evento (85% probabilidad)
    """
    # Generar un n√∫mero aleatorio entre 0 y 1
    if random.random() < PROBABILIDAD_EVENTO_CLIMATICO:  # 15% de probabilidad
        # Si ocurre evento, elegir uno al azar de la lista
        eventos = ["ola_frio", "dia_soleado"]
        return random.choice(eventos)
    # Si no ocurre evento, retornar None
    return None


def aplicar_evento_climatico(configuracion: dict, evento: str) -> None:
    """
    Aplica un evento clim√°tico a todos los invernaderos.

    Par√°metros:
        configuracion: dict, diccionario principal del juego
        evento: str, puede ser "ola_frio" o "dia_soleado"

    Esta funci√≥n modifica la temperatura de todos los invernaderos.
    """
    if evento == "ola_frio":
        # Informar al jugador sobre el evento
        print(f"ü•∂ EVENTO CLIM√ÅTICO: Ola de fr√≠o (-{EVENTO_CLIMATICO_CAMBIO_TEMP}¬∞C)")
        # Aplicar reducci√≥n de temperatura a todos los invernaderos
        for serre in configuracion["serres"]:
            serre["ambiente"]["temperatura"] -= EVENTO_CLIMATICO_CAMBIO_TEMP
    elif evento == "dia_soleado":
        # Informar al jugador sobre el evento
        print(f"‚òÄÔ∏è EVENTO CLIM√ÅTICO: D√≠a soleado intenso (+{EVENTO_CLIMATICO_CAMBIO_TEMP}¬∞C)")
        # Aplicar aumento de temperatura a todos los invernaderos
        for serre in configuracion["serres"]:
            serre["ambiente"]["temperatura"] += EVENTO_CLIMATICO_CAMBIO_TEMP


def aplicar_fluctuacion_diaria(configuracion: dict) -> None:
    """
    Aplica fluctuaciones aleatorias de temperatura.

    Par√°metros:
        configuracion: dict, diccionario principal del juego

    Simula la variaci√≥n natural de temperatura a√±adiendo un valor
    aleatorio entre -1¬∞C y +1¬∞C a cada invernadero.
    """
    # Recorrer cada invernadero
    for serre in configuracion["serres"]:
        # Generar un n√∫mero aleatorio entre -1.0 y +1.0
        fluctuacion = random.uniform(-FLUCTUACION_TEMPERATURA_MAX, FLUCTUACION_TEMPERATURA_MAX)
        # A√±adir la fluctuaci√≥n a la temperatura actual
        serre["ambiente"]["temperatura"] += fluctuacion


def aplicar_evapotranspiracion(configuracion: dict) -> None:
    """
    Aplica la evapotranspiraci√≥n a todas las plantas.

    Par√°metros:
        configuracion: dict, diccionario principal del juego

    La evapotranspiraci√≥n es la p√©rdida de agua por evaporaci√≥n del suelo.
    La tasa de p√©rdida depende de la humedad del aire:
    - Aire seco (< 50%): p√©rdida r√°pida (-6% humedad suelo)
    - Aire normal (50-80%): p√©rdida media (-4% humedad suelo)
    - Aire h√∫medo (> 80%): p√©rdida lenta (-2% humedad suelo)
    """
    # Recorrer cada invernadero
    for serre in configuracion["serres"]:
        # Obtener la humedad relativa del aire de este invernadero
        humedad_relativa = serre["ambiente"]["humedad_relativa"]

        # Determinar tasa de evapotranspiraci√≥n seg√∫n humedad del aire
        if humedad_relativa < 50:
            # Aire seco: las plantas pierden agua m√°s r√°pido
            tasa = TASA_EVAPOTRANSPIRACION_AIRE_SECO  # -6.0
        elif humedad_relativa > 80:
            # Aire h√∫medo: las plantas pierden agua m√°s lento
            tasa = TASA_EVAPOTRANSPIRACION_AIRE_HUMEDO  # -2.0
        else:
            # Aire normal: tasa est√°ndar
            tasa = TASA_EVAPOTRANSPIRACION_BASE  # -4.0

        # Aplicar la tasa a todas las plantas vivas del invernadero
        for planta in serre["plantas"]:
            if planta["estado"] == "viva":
                # Reducir humedad del suelo (tasa es negativa)
                # Usar max(0.0, ...) para evitar valores negativos
                planta["humedad_suelo"] = max(0.0, planta["humedad_suelo"] + tasa)


# =============================================================================
# FUNCIONES DE ACCIONES DE La PERSONA JUGADORA
# =============================================================================


def buscar_planta_por_id(configuracion: dict, planta_id: str) -> Tuple:
    """
    Busca una planta por su ID en todos los invernaderos.

    Par√°metros:
        configuracion: dict, diccionario principal del juego
        planta_id: str, identificador de la planta (ej: "ORQ01")

    Retorna:
        tuple: (serre, planta) si encuentra la planta
               - serre: dict del invernadero que contiene la planta
               - planta: dict con los datos de la planta
               (None, None) si no encuentra la planta
    """
    # Recorrer cada invernadero
    for serre in configuracion["serres"]:
        # Recorrer cada planta en este invernadero
        for planta in serre["plantas"]:
            # Si encontramos la planta buscada, retornar ambos
            if planta["id"] == planta_id:
                return serre, planta
    # Si no se encontr√≥, retornar None, None
    return None, None


def buscar_serre_por_nombre(configuracion: dict, nombre_serre: str) -> dict:
    """
    Busca un invernadero por su nombre.

    Par√°metros:
        configuracion: dict, diccionario principal del juego
        nombre_serre: str, nombre del invernadero (ej: "Serre Tropicale")

    Retorna:
        dict: Diccionario del invernadero si lo encuentra
        None: Si no encuentra el invernadero

    Nota: La comparaci√≥n ignora may√∫sculas/min√∫sculas usando .lower()
    """
    # Recorrer cada invernadero
    for serre in configuracion["serres"]:
        # Comparar nombres en min√∫sculas para evitar problemas de may√∫sculas
        if serre["nombre"].lower() == nombre_serre.lower():
            return serre
    # Si no se encontr√≥, retornar None
    return None


def calcular_costo_riego(planta: dict, requerimientos: dict) -> float:
    """
    Calcula el costo de agua para regar una planta hasta el √≥ptimo.

    Par√°metros:
        planta: dict con datos de la planta (debe tener "humedad_suelo")
        requerimientos: dict con "humedad_suelo_optima" (tupla min, max)

    Retorna:
        float: Litros de agua necesarios
               - 0.0 si la planta ya tiene suficiente agua
               - Cantidad calculada seg√∫n: 1 litro por cada 10% de diferencia

    Ejemplo:
        Planta con 40% humedad, √≥ptimo (55, 75)
        Diferencia: 75 - 40 = 35%
        Costo: (35 / 10) * 1 = 3.5 litros
    """
    # Extraer el valor m√°ximo √≥ptimo (ignoramos el m√≠nimo con _)
    _, humedad_max_optima = requerimientos["humedad_suelo_optima"]
    humedad_actual = planta["humedad_suelo"]

    # Si ya tiene suficiente agua, no cuesta nada
    if humedad_actual >= humedad_max_optima:
        return 0.0

    # Calcular cu√°nta humedad falta para llegar al m√°ximo
    diferencia_porcentaje = humedad_max_optima - humedad_actual
    # Calcular costo: 1 litro por cada 10% de diferencia
    costo_agua = (diferencia_porcentaje / 10.0) * COSTO_RIEGO_LITROS_POR_10_PERCENT
    return costo_agua


def ejecutar_riego(configuracion: dict, planta_id: str) -> Tuple[bool, str]:
    """
    Ejecuta la acci√≥n de riego en una planta espec√≠fica.

    Par√°metros:
        configuracion: dict, diccionario principal del juego
        planta_id: str, ID de la planta a regar (ej: "ORQ01")

    Retorna:
        tuple[bool, str]: (exito, mensaje)
        - exito: True si se reg√≥ exitosamente, False si hubo error
        - mensaje: Descripci√≥n de lo que ocurri√≥

    Efectos si tiene √©xito:
        - Reduce el agua del tanque global
        - Aumenta humedad_suelo de la planta al m√°ximo √≥ptimo
    """
    # Buscar la planta en todos los invernaderos
    serre, planta = buscar_planta_por_id(configuracion, planta_id)

    # Validaci√≥n 1: Verificar si la planta existe
    if not serre or not planta:
        return False, f"‚ùå Planta {planta_id} no encontrada."

    # Validaci√≥n 2: Verificar si la planta est√° viva
    if planta["estado"] == "muerta":
        return False, f"‚ùå La planta {planta_id} est√° muerta."

    # Calcular cu√°nta agua se necesita
    costo_agua = calcular_costo_riego(planta, serre["requerimientos"])

    # Validaci√≥n 3: Verificar si ya tiene suficiente agua
    if costo_agua == 0:
        return False, f"‚ùå La planta {planta_id} ya tiene suficiente agua."

    # Validaci√≥n 4: Verificar si hay suficiente agua en el tanque
    if configuracion["recursos_globales"]["tanque_agua_litros"] < costo_agua:
        return (
            False,
            f"‚ùå Agua insuficiente para regar {planta_id} (necesita {costo_agua:.1f}L).",
        )

    # Ejecutar el riego
    # 1. Restar agua del tanque global
    configuracion["recursos_globales"]["tanque_agua_litros"] -= costo_agua
    # 2. Llenar la humedad del suelo al m√°ximo √≥ptimo
    _, humedad_max_optima = serre["requerimientos"]["humedad_suelo_optima"]
    planta["humedad_suelo"] = humedad_max_optima

    return True, f"‚úÖ Planta {planta_id} regada (costo: {costo_agua:.1f}L)."


def ejecutar_calefaccion(configuracion: dict, nombre_serre: str) -> Tuple[bool, str]:
    """
    Ejecuta la acci√≥n de calefacci√≥n en un invernadero.

    Par√°metros:
        configuracion: dict, diccionario principal del juego
        nombre_serre: str, nombre del invernadero (ej: "Serre Tropicale")

    Retorna:
        tuple[bool, str]: (exito, mensaje)

    Efectos si tiene √©xito:
        - Efecto primario: Aumenta temperatura +2¬∞C
        - Efecto secundario: Reduce humedad relativa -5%
        - Consume 5 kWh de energ√≠a diaria
    """
    # Buscar el invernadero por nombre
    serre = buscar_serre_por_nombre(configuracion, nombre_serre)

    # Validaci√≥n 1: Verificar si el invernadero existe
    if not serre:
        return False, f"‚ùå Invernadero '{nombre_serre}' no encontrado."

    # Validaci√≥n 2: Verificar si hay suficiente energ√≠a
    if configuracion["recursos_globales"]["energia_diaria_kwh"] < COSTO_CALEFACCION_KWH:
        return (
            False,
            f"‚ùå Energ√≠a insuficiente para calefacci√≥n (necesita {COSTO_CALEFACCION_KWH}kWh).",
        )

    # Ejecutar calefacci√≥n
    # 1. Restar energ√≠a
    configuracion["recursos_globales"]["energia_diaria_kwh"] -= COSTO_CALEFACCION_KWH
    # 2. Efecto primario: aumentar temperatura
    serre["ambiente"]["temperatura"] += EFECTO_CALEFACCION_TEMP
    # 3. Efecto secundario: reducir humedad relativa (m√≠nimo 0%)
    serre["ambiente"]["humedad_relativa"] = max(
        0.0, serre["ambiente"]["humedad_relativa"] + EFECTO_CALEFACCION_HUMEDAD
    )

    return (
        True,
        f"‚úÖ Calefacci√≥n activada en {serre['nombre']} (costo: {COSTO_CALEFACCION_KWH}kWh).",
    )


def ejecutar_ventilacion(configuracion: dict, nombre_serre: str) -> Tuple[bool, str]:
    """
    Ejecuta la acci√≥n de ventilaci√≥n en un invernadero.

    Par√°metros:
        configuracion: dict, diccionario principal del juego
        nombre_serre: str, nombre del invernadero (ej: "Serre Tropicale")

    Retorna:
        tuple[bool, str]: (exito, mensaje)

    Efectos si tiene √©xito:
        - Efecto primario: Reduce temperatura -2¬∞C
        - Efecto secundario: Aumenta humedad relativa +5%
        - Consume 3 kWh de energ√≠a diaria
    """
    # Buscar el invernadero por nombre
    serre = buscar_serre_por_nombre(configuracion, nombre_serre)

    # Validaci√≥n 1: Verificar si el invernadero existe
    if not serre:
        return False, f"‚ùå Invernadero '{nombre_serre}' no encontrado."

    # Validaci√≥n 2: Verificar si hay suficiente energ√≠a
    if configuracion["recursos_globales"]["energia_diaria_kwh"] < COSTO_VENTILACION_KWH:
        return (
            False,
            f"‚ùå Energ√≠a insuficiente para ventilaci√≥n (necesita {COSTO_VENTILACION_KWH}kWh).",
        )

    # Ejecutar ventilaci√≥n
    # 1. Restar energ√≠a
    configuracion["recursos_globales"]["energia_diaria_kwh"] -= COSTO_VENTILACION_KWH
    # 2. Efecto primario: reducir temperatura
    serre["ambiente"]["temperatura"] += EFECTO_VENTILACION_TEMP  # -2.0
    # 3. Efecto secundario: aumentar humedad relativa (m√°ximo 100%)
    serre["ambiente"]["humedad_relativa"] = min(
        100.0, serre["ambiente"]["humedad_relativa"] + EFECTO_VENTILACION_HUMEDAD
    )

    return (
        True,
        f"‚úÖ Ventilaci√≥n activada en {serre['nombre']} (costo: {COSTO_VENTILACION_KWH}kWh).",
    )


def procesar_comando(configuracion: dict, comando: str) -> Tuple[bool, str]:
    """
    Procesa un comando del jugador y ejecuta la acci√≥n correspondiente.

    Par√°metros:
        configuracion: dict, diccionario principal del juego
        comando: str, texto ingresado por el usuario (ej: "regar ORQ01")

    Retorna:
        tuple[bool, str]: (exito, mensaje)

    Comandos soportados:
        - "regar <ID>" -> ejecuta riego
        - "calefaccion <nombre>" -> ejecuta calefacci√≥n
        - "ventilacion <nombre>" -> ejecuta ventilaci√≥n
        - "pasar" -> termina el turno
        - "ayuda" -> muestra ayuda
        - "condiciones" -> muestra condiciones √≥ptimas
    """
    # Limpiar espacios y separar el comando en palabras
    partes = comando.strip().lower().split()

    # Validar que no est√© vac√≠o
    if not partes:
        return False, "‚ùå Comando vac√≠o."

    # La primera palabra es la acci√≥n
    accion = partes[0]

    # Procesar seg√∫n la acci√≥n
    if accion == "regar" and len(partes) == 2:
        # Extraer ID de planta y convertir a may√∫sculas
        # el id tiene que estar en may√∫sculas para coincidir
        # con como son los ids de las plantas en la configuraci√≥n
        planta_id = partes[1].upper()
        return ejecutar_riego(configuracion, planta_id)

    elif accion == "calefaccion" and len(partes) >= 2:
        # Unir todas las palabras despu√©s de "calefaccion" y capitalizar
        # aqu√≠ usamos title() para poner may√∫scula inicial en cada palabra
        # usamos " ".join(partes[1:]) para unir todas las palabras
        # el partes[1:] toma desde la segunda palabra hasta el final
        nombre_serre = " ".join(partes[1:]).title()
        return ejecutar_calefaccion(configuracion, nombre_serre)

    elif accion == "ventilacion" and len(partes) >= 2:
        # Unir todas las palabras despu√©s de "ventilacion" y capitalizar
        nombre_serre = " ".join(partes[1:]).title()
        return ejecutar_ventilacion(configuracion, nombre_serre)

    elif accion == "pasar":
        return True, "‚úÖ Turno terminado."

    elif accion == "ayuda":
        return True, mostrar_ayuda()

    elif accion == "condiciones":
        return True, mostrar_condiciones_optimas(configuracion)

    else:
        return (
            False,
            "‚ùå Comando no reconocido. Use 'ayuda' para ver comandos disponibles.",
        )


# =============================================================================
# FUNCIONES DE INTERFAZ Y REPORTES
# =============================================================================


def mostrar_ayuda() -> str:
    """
    Muestra la ayuda de comandos disponibles.

    Retorna:
        str: Texto con todos los comandos y c√≥mo usarlos
    """
    return """
üìö COMANDOS DISPONIBLES:

üöø RIEGO:
‚Ä¢ regar <ID_PLANTA>          - Riega una planta espec√≠fica hasta su nivel √≥ptimo
  Formato: regar SAG01       - Las IDs aparecen en el reporte diario
  Costo: Variable seg√∫n la cantidad de agua necesaria (1L por cada 10%)

üî• CALEFACCI√ìN:
‚Ä¢ calefaccion <INVERNADERO>  - Aumenta temperatura (+2¬∞C, -5% humedad)
  Formato: calefaccion Serre Des Cactus
  Costo: 5 kWh de energ√≠a diaria

üí® VENTILACI√ìN:
‚Ä¢ ventilacion <INVERNADERO>  - Reduce temperatura (-2¬∞C, +5% humedad)
  Formato: ventilacion Serre Tropicale
  Costo: 3 kWh de energ√≠a diaria

‚è≠Ô∏è CONTROL:
‚Ä¢ pasar                      - Termina tu turno y avanza al siguiente d√≠a
‚Ä¢ ayuda                      - Muestra esta ayuda
‚Ä¢ condiciones                - Muestra condiciones √≥ptimas de todas las plantas

üí° CONSEJOS:
- Escribe los nombres de invernaderos EXACTAMENTE como aparecen en el reporte
- Las IDs de plantas son sensibles a may√∫sculas/min√∫sculas
- Puedes usar m√∫ltiples comandos antes de escribir 'pasar'
- Revisa las condiciones √≥ptimas con 'condiciones' para planificar mejor
"""


def mostrar_condiciones_optimas(configuracion: dict) -> str:
    """
    Muestra las condiciones √≥ptimas para todas las plantas.

    Par√°metros:
        configuracion: dict, diccionario principal del juego

    Retorna:
        str: Texto formateado con las condiciones √≥ptimas de cada invernadero
    """
    info = "\nüå± CONDICIONES √ìPTIMAS POR INVERNADERO:\n"
    info += "=" * 50 + "\n"

    # Recorrer cada invernadero
    for serre in configuracion["serres"]:
        info += f"\nüè† {serre['nombre']}\n"
        info += f"   Especie: {serre['especie']}\n"

        # Extraer rangos √≥ptimos
        temp_min, temp_max = serre["requerimientos"]["temperatura_optima"]
        humid_min, humid_max = serre["requerimientos"]["humedad_suelo_optima"]

        info += f"   üå°Ô∏è Temperatura √≥ptima: {temp_min}¬∞C - {temp_max}¬∞C\n"
        info += f"   üíß Humedad suelo √≥ptima: {humid_min}% - {humid_max}%\n"

        # Mostrar temperatura actual y si est√° en rango
        temp_actual = serre["ambiente"]["temperatura"]
        if temp_min <= temp_actual <= temp_max:
            info += f"   ‚úÖ Temperatura actual: {temp_actual:.1f}¬∞C (√ìPTIMA)\n"
        else:
            info += f"   ‚ö†Ô∏è Temperatura actual: {temp_actual:.1f}¬∞C (FUERA DE RANGO)\n"

        # Mostrar plantas y sus niveles
        plantas_vivas = [p for p in serre["plantas"] if p["estado"] == "viva"]
        info += f"   üåø Plantas: {', '.join(p['id'] for p in plantas_vivas)}\n"

    return info


def mostrar_estado_recursos(configuracion: dict) -> None:
    """
    Muestra el estado actual de los recursos.

    Par√°metros:
        configuracion: dict, diccionario principal del juego

    Imprime en pantalla los recursos disponibles (agua y energ√≠a).
    """
    recursos = configuracion["recursos_globales"]
    print(f"üíß Agua: {recursos['tanque_agua_litros']:.1f}L")
    energia_max = recursos.get("energia_diaria_max_kwh", recursos["energia_diaria_kwh"])
    print(f"‚ö° Energ√≠a diaria: {recursos['energia_diaria_kwh']:.1f}/{energia_max:.1f}kWh")


def mostrar_estado_serre(serre: dict) -> None:
    """
    Muestra el estado detallado de un invernadero.

    Par√°metros:
        serre: dict con estructura de invernadero
               {"nombre": str, "ambiente": dict, "especie": str,
                "requerimientos": dict, "plantas": list}

    Imprime informaci√≥n del ambiente y estado de cada planta.
    """
    print(f"\nüè† {serre['nombre']} - {serre['especie']}")

    # Informaci√≥n ambiental actual
    temp_actual = serre["ambiente"]["temperatura"]
    humedad_rel = serre["ambiente"]["humedad_relativa"]
    print(f"   üå°Ô∏è Temperatura: {temp_actual:.1f}¬∞C")
    print(f"   üí® Humedad relativa: {humedad_rel:.1f}%")

    # Condiciones √≥ptimas para referencia
    temp_min, temp_max = serre["requerimientos"]["temperatura_optima"]
    humid_min, humid_max = serre["requerimientos"]["humedad_suelo_optima"]

    # Indicar si temperatura est√° en rango √≥ptimo
    if temp_min <= temp_actual <= temp_max:
        print(f"   ‚úÖ Temperatura √≥ptima: {temp_min}-{temp_max}¬∞C (CUMPLIDA)")
    else:
        # Determinar si necesita calefacci√≥n o ventilaci√≥n
        if temp_actual < temp_min:
            print(f"   ü•∂ Temperatura √≥ptima: {temp_min}-{temp_max}¬∞C (NECESITA CALEFACCI√ìN)")
        else:
            print(f"   üî• Temperatura √≥ptima: {temp_min}-{temp_max}¬∞C (NECESITA VENTILACI√ìN)")

    # Filtrar plantas vivas y encontrar casos cr√≠ticos
    plantas_vivas = [p for p in serre["plantas"] if p["estado"] == "viva"]
    plantas_criticas = [p for p in plantas_vivas if p["salud"] < 50.0]
    plantas_secas = [p for p in plantas_vivas if p["humedad_suelo"] < humid_min]

    print(f"   üå± Plantas vivas: {len(plantas_vivas)}/{len(serre['plantas'])}")

    # Alertas especiales
    if plantas_criticas:
        print(f"   üÜò SALUD CR√çTICA: {', '.join(p['id'] for p in plantas_criticas)}")

    if plantas_secas:
        print(f"   üöø NECESITAN RIEGO: {', '.join(p['id'] for p in plantas_secas)}")

    print(f"   üíß Rango humedad suelo √≥ptimo: {humid_min}-{humid_max}%")

    # Mostrar cada planta viva individualmente
    for planta in plantas_vivas:
        # Determinar emoji de estado de salud
        estado_salud = "üÜò" if planta["salud"] < 50 else "‚ö†Ô∏è" if planta["salud"] < 80 else "‚úÖ"
        # Determinar emoji de estado de agua
        estado_agua = "üöø" if planta["humedad_suelo"] < humid_min else "‚úÖ"
        print(
            f"      {estado_salud}{estado_agua} {planta['id']}: Salud {planta['salud']:.1f}%, "
            f"Humedad suelo {planta['humedad_suelo']:.1f}%"
        )


def mostrar_informe_diario(configuracion: dict, dia: int) -> None:
    """
    Muestra el informe completo del estado diario.

    Par√°metros:
        configuracion: dict, diccionario principal del juego
        dia: int, n√∫mero del d√≠a actual (1-10)

    Imprime un reporte completo con recursos, estado de invernaderos y plantas.
    """
    print("\n" + "=" * 60)
    print(f"üìÖ D√çA {dia}/{DIAS_SIMULACION} - REPORTE DE ESTADO")
    print("=" * 60)

    # Mostrar recursos disponibles
    mostrar_estado_recursos(configuracion)

    # Mostrar estado de cada invernadero
    for serre in configuracion["serres"]:
        mostrar_estado_serre(serre)

    # Pie de p√°gina con informaci√≥n √∫til
    print("\n" + "=" * 60)
    print("üí° LEYENDA: ‚úÖ=√ìptimo | ‚ö†Ô∏è=Precauci√≥n | üÜò=Cr√≠tico | üöø=Necesita riego")
    print("üìã Comandos √∫tiles: 'ayuda' - 'condiciones' - 'pasar'")
    print("-" * 60)


def contar_plantas_vivas(configuracion: dict) -> Tuple[int, int]:
    """
    Cuenta el total de plantas vivas en toda la simulaci√≥n.

    Par√°metros:
        configuracion: dict, diccionario principal del juego

    Retorna:
        tuple[int, int]: (plantas_vivas, total_plantas)
        - plantas_vivas: cantidad de plantas con estado "viva"
        - total_plantas: cantidad total de plantas en todos los invernaderos
    """
    total_vivas = 0
    total_plantas = 0

    # Recorrer cada invernadero
    for serre in configuracion["serres"]:
        # Recorrer cada planta
        for planta in serre["plantas"]:
            total_plantas += 1
            if planta["estado"] == "viva":
                total_vivas += 1

    return total_vivas, total_plantas


def mostrar_informe_final(configuracion: dict) -> None:
    """
    Muestra el informe final de la simulaci√≥n.

    Par√°metros:
        configuracion: dict, diccionario principal del juego

    Calcula y muestra:
    - Cantidad de plantas supervivientes
    - Porcentaje de supervivencia
    - Agua restante
    - Calificaci√≥n del desempe√±o
    """
    # Contar resultados
    vivas, total = contar_plantas_vivas(configuracion)
    porcentaje = (vivas / total) * 100 if total > 0 else 0

    print("\n" + "üåø" * 20)
    print("INFORME FINAL DE LAS GRANDES SERRES")
    print("üåø" * 20)
    print(f"üìä Plantas supervivientes: {vivas}/{total} ({porcentaje:.1f}%)")
    print(f"üíß Agua restante: {configuracion['recursos_globales']['tanque_agua_litros']:.1f}L")

    # Clasificar rendimiento seg√∫n porcentaje de supervivencia
    if porcentaje >= 90:
        print("üèÜ ¬°EXCELENTE! Eres un maestro bot√°nico.")
    elif porcentaje >= 75:
        print("ü•à ¬°MUY BIEN! Buen trabajo como director.")
    elif porcentaje >= 50:
        print("ü•â ACEPTABLE. Podr√≠as mejorar la gesti√≥n.")
    else:
        print("üíî DESASTROSO. Las plantas necesitaban mejor cuidado.")

    print("üåø" * 20 + "\n")


# =============================================================================
# FUNCI√ìN PRINCIPAL DE JUEGO
# =============================================================================


def ciclo_decision_jugador(configuracion: dict) -> None:
    """
    Maneja el ciclo de decisiones del jugador durante un d√≠a.

    Par√°metros:
        configuracion: dict, diccionario principal del juego

    Esta funci√≥n ejecuta un bucle interactivo donde:
    1. Solicita comandos al jugador uno por uno
    2. Procesa y ejecuta cada comando
    3. Termina cuando el jugador escribe "pasar"

    El bucle es infinito (while True) y solo se rompe con "pasar" o interrupci√≥n.
    """
    print("\nüéÆ ES TU TURNO - GESTIONA TUS INVERNADEROS")
    print("Escribe tus comandos uno por uno. Escribe 'pasar' cuando termines.")
    print("üí° TIP: Usa 'ayuda' para ver comandos o 'condiciones' para ver requisitos √≥ptimos")

    comando_numero = 1  # Contador para enumerar los comandos

    # Bucle infinito que solo termina con 'pasar' o interrupci√≥n
    while True:
        try:
            # Pedir comando al usuario
            comando = input(f"üë§ Comando #{comando_numero} > ").strip()

            # Validar que no est√© vac√≠o
            if not comando:
                print("‚ö†Ô∏è Comando vac√≠o. Escribe 'ayuda' si necesitas informaci√≥n.")
                continue  # Volver al inicio del bucle sin incrementar contador

            # Procesar el comando
            exito, mensaje = procesar_comando(configuracion, comando)
            print(mensaje)  # Mostrar resultado

            # Si el comando fue "pasar", salir del bucle
            if comando.lower() == "pasar":
                print("‚è≠Ô∏è Terminando turno y avanzando al siguiente d√≠a...")
                break  # Salir del while

            # Incrementar contador solo si fue un comando de acci√≥n exitoso
            # (no cuenta ayuda ni condiciones)
            if exito and comando.lower() not in ["ayuda", "condiciones"]:
                comando_numero += 1

        except KeyboardInterrupt:
            # Si el usuario presiona Ctrl+C, terminar el d√≠a
            print("\nüîÑ Juego interrumpido. Finalizando d√≠a...")
            break
        except Exception as e:
            print(f"‚ùå Error procesando comando: {e}")
            print("üí° Intenta escribir 'ayuda' para ver los comandos disponibles.")


def simular_dia(configuracion: dict, dia: int) -> None:
    """
    Simula un d√≠a completo del juego.

    Par√°metros:
        configuracion: dict, diccionario principal del juego
        dia: int, n√∫mero del d√≠a actual (1-10)

    ORDEN DE EJECUCI√ìN (seg√∫n especificaciones del enunciado):
    1. Inicio del d√≠a: reiniciar energ√≠a diaria
    2. Evento clim√°tico: posible ola de fr√≠o o d√≠a soleado
    3. Mostrar informe: recursos y estado de plantas
    4. Actualizar salud: aplicar f√≥rmula de da√±o/recuperaci√≥n
    5. Ciclo de jugador: recibir y ejecutar acciones
    6. Cambios pasivos: fluctuaci√≥n de temperatura y evapotranspiraci√≥n
    """
    # PASO 1: Inicio del d√≠a - Reiniciar energ√≠a diaria al m√°ximo
    recursos = configuracion["recursos_globales"]
    energia_max = recursos.get("energia_diaria_max_kwh", recursos["energia_diaria_kwh"])
    recursos["energia_diaria_max_kwh"] = energia_max
    recursos["energia_diaria_kwh"] = energia_max

    # PASO 2: Evento clim√°tico al inicio (15% probabilidad)
    evento = generar_evento_climatico()
    if evento:
        aplicar_evento_climatico(configuracion, evento)

    # PASO 3: Mostrar informe del d√≠a
    mostrar_informe_diario(configuracion, dia)

    # PASO 4: Actualizar salud de plantas (antes de que el jugador act√∫e)
    actualizar_salud_plantas(configuracion)

    # PASO 5: Ciclo de decisi√≥n del jugador (interactivo)
    ciclo_decision_jugador(configuracion)

    # PASO 6: Cambios naturales pasivos (despu√©s de las acciones del jugador)
    aplicar_fluctuacion_diaria(configuracion)
    aplicar_evapotranspiracion(configuracion)


def jugar() -> None:
    """
    Funci√≥n principal que ejecuta todo el juego.

    Esta es la funci√≥n que coordina toda la simulaci√≥n:
    1. Muestra la introducci√≥n
    2. Permite seleccionar dificultad
    3. Ejecuta el bucle principal de 10 d√≠as
    4. Muestra el informe final

    No recibe par√°metros ni retorna nada.
    """
    # Mostrar introducci√≥n y bienvenida
    mostrar_introduccion_juego()

    # Seleccionar configuraci√≥n (f√°cil, media o dif√≠cil)
    configuracion = seleccionar_configuracion()
    # Si el jugador elige "Salir" (opci√≥n 4), retornar None y terminar
    if not configuracion:
        return

    print(f"\nüöÄ ¬°Iniciando simulaci√≥n de {DIAS_SIMULACION} d√≠as!")
    print("üéØ Objetivo: Mantener vivas el m√°ximo n√∫mero de plantas.")

    # Ejecutar simulaci√≥n d√≠a por d√≠a (bucle principal del juego)
    for dia in range(1, DIAS_SIMULACION + 1):
        simular_dia(configuracion, dia)

        # Verificar condici√≥n de derrota: todas las plantas murieron
        vivas, _ = contar_plantas_vivas(configuracion)
        if vivas == 0:
            print("\nüíÄ Todas las plantas han muerto. Juego terminado.")
            break  # Salir del bucle antes de completar los 10 d√≠as

    # Mostrar informe final con estad√≠sticas y calificaci√≥n
    mostrar_informe_final(configuracion)


# =============================================================================
# PUNTO DE ENTRADA DEL PROGRAMA
# =============================================================================
# Este bloque se ejecuta SOLO cuando se ejecuta este archivo directamente.
# Si se importara este archivo desde otro programa, este bloque NO se ejecutar√≠a.
# Es una buena pr√°ctica en Python para definir el punto de inicio del programa.

if __name__ == "__main__":
    jugar()  # Llamar a la funci√≥n principal que inicia el juego
