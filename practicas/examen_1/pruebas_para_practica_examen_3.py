"""
Pruebas de Verificaci√≥n para la Soluci√≥n del Examen 3
======================================================

Este archivo verifica que la soluci√≥n cumple correctamente con TODOS
los requisitos especificados en el enunciado del examen.
"""

from solucion_practica_examen_3 import (
    # Funciones de c√°lculo
    calcular_desviacion_termica,
    calcular_desviacion_hidrica,
    calcular_cambio_salud,
    # Funciones de acciones
    calcular_costo_riego,
    ejecutar_riego,
    ejecutar_calefaccion,
    ejecutar_ventilacion,
    # Funciones de ambiente
    aplicar_evapotranspiracion,
    aplicar_fluctuacion_diaria,
    # Funciones de configuraci√≥n
    obtener_configuracion_facil,
    # Constantes
    COSTO_CALEFACCION_KWH,
    COSTO_VENTILACION_KWH,
    COSTO_RIEGO_LITROS_POR_10_PERCENT,
    EFECTO_CALEFACCION_TEMP,
    EFECTO_VENTILACION_TEMP,
    EFECTO_CALEFACCION_HUMEDAD,
    EFECTO_VENTILACION_HUMEDAD,
    RECUPERACION_SALUD_OPTIMA,
    TASA_EVAPOTRANSPIRACION_BASE,
    TASA_EVAPOTRANSPIRACION_AIRE_SECO,
    TASA_EVAPOTRANSPIRACION_AIRE_HUMEDO,
)


def test_estructura_datos():
    """
    REQUISITO: Modelo de Datos del Complejo Bot√°nico
    Verificar que la estructura de datos cumple con el enunciado.
    """
    print("üß™ TEST 1: Estructura de Datos")
    print("-" * 50)
    
    config = obtener_configuracion_facil()
    
    # Verificar recursos globales
    assert "recursos_globales" in config, "Falta 'recursos_globales'"
    recursos = config["recursos_globales"]
    assert "tanque_agua_litros" in recursos, "Falta 'tanque_agua_litros'"
    assert "energia_diaria_kwh" in recursos, "Falta 'energia_diaria_kwh'"
    
    # Verificar que serres es una LISTA (no diccionario con claves de nombre)
    assert "serres" in config, "Falta 'serres'"
    assert isinstance(config["serres"], list), "‚ùå ERROR: 'serres' debe ser una LISTA"
    
    # Verificar estructura de cada invernadero
    for serre in config["serres"]:
        assert "nombre" in serre, "Falta 'nombre' en invernadero"
        assert "ambiente" in serre, "Falta 'ambiente'"
        assert "especie" in serre, "Falta 'especie'"
        assert "requerimientos" in serre, "Falta 'requerimientos'"
        assert "plantas" in serre, "Falta 'plantas'"
        
        # Verificar ambiente
        assert "temperatura" in serre["ambiente"]
        assert "humedad_relativa" in serre["ambiente"]
        
        # Verificar requerimientos
        req = serre["requerimientos"]
        assert "temperatura_optima" in req
        assert "humedad_suelo_optima" in req
        assert "k_T" in req
        assert "k_M" in req
        
        # Verificar que los rangos √≥ptimos son TUPLAS
        assert isinstance(req["temperatura_optima"], tuple), "temperatura_optima debe ser tupla"
        assert isinstance(req["humedad_suelo_optima"], tuple), "humedad_suelo_optima debe ser tupla"
        
        # Verificar plantas
        for planta in serre["plantas"]:
            assert "id" in planta
            assert "humedad_suelo" in planta
            assert "salud" in planta
            assert "estado" in planta
    
    print("‚úÖ Estructura de datos correcta")
    print()


def test_desviacion_termica():
    """
    REQUISITO: C√°lculo de Desviaciones - Desviaci√≥n t√©rmica (ŒîT)
    """
    print("üß™ TEST 2: Desviaci√≥n T√©rmica")
    print("-" * 50)
    
    # Caso 1: Dentro del rango √≥ptimo
    assert calcular_desviacion_termica(27.0, (24, 30)) == 0.0, "Error: dentro del rango debe ser 0"
    
    # Caso 2: Por debajo del m√≠nimo
    delta_t = calcular_desviacion_termica(22.0, (24, 30))
    assert delta_t == 2.0, f"Error: 22¬∞C con rango (24,30) debe dar 2.0, dio {delta_t}"
    
    # Caso 3: Por encima del m√°ximo
    delta_t = calcular_desviacion_termica(32.0, (24, 30))
    assert delta_t == 2.0, f"Error: 32¬∞C con rango (24,30) debe dar 2.0, dio {delta_t}"
    
    # Caso 4: En los l√≠mites exactos
    assert calcular_desviacion_termica(24.0, (24, 30)) == 0.0, "Error: l√≠mite inferior"
    assert calcular_desviacion_termica(30.0, (24, 30)) == 0.0, "Error: l√≠mite superior"
    
    print("‚úÖ Desviaci√≥n t√©rmica correcta")
    print()


def test_desviacion_hidrica():
    """
    REQUISITO: C√°lculo de Desviaciones - Desviaci√≥n de humedad del suelo (ŒîM)
    El enunciado dice: "Es 0 si la humedad est√° por encima del m√≠nimo"
    """
    print("üß™ TEST 3: Desviaci√≥n H√≠drica")
    print("-" * 50)
    
    # Caso 1: Por encima del m√≠nimo (en el rango o m√°s)
    assert calcular_desviacion_hidrica(60.0, (55, 75)) == 0.0, "Error: dentro del rango debe ser 0"
    assert calcular_desviacion_hidrica(55.0, (55, 75)) == 0.0, "Error: en el m√≠nimo debe ser 0"
    assert calcular_desviacion_hidrica(80.0, (55, 75)) == 0.0, "Error: por encima del m√°ximo debe ser 0"
    
    # Caso 2: Por debajo del m√≠nimo
    delta_m = calcular_desviacion_hidrica(50.0, (55, 75))
    assert delta_m == 5.0, f"Error: 50% con rango (55,75) debe dar 5.0, dio {delta_m}"
    
    print("‚úÖ Desviaci√≥n h√≠drica correcta")
    print()


def test_formula_salud():
    """
    REQUISITO: F√≥rmula de Da√±o por Estr√©s
    ŒîH = -(k_T¬∑ŒîT¬≤ + k_M¬∑ŒîM¬≤)
    """
    print("üß™ TEST 4: F√≥rmula de Salud")
    print("-" * 50)
    
    # Preparar datos de prueba
    planta = {
        "id": "TEST01",
        "humedad_suelo": 50.0,
        "salud": 100.0,
        "estado": "viva"
    }
    ambiente = {
        "temperatura": 32.0,
        "humedad_relativa": 70.0
    }
    requerimientos = {
        "temperatura_optima": (24, 30),
        "humedad_suelo_optima": (55, 75),
        "k_T": 0.12,
        "k_M": 0.1
    }
    
    # Calcular manualmente:
    # ŒîT = 32 - 30 = 2.0 (por encima del m√°ximo)
    # ŒîM = 55 - 50 = 5.0 (por debajo del m√≠nimo)
    # ŒîH = -(0.12 * 2¬≤ + 0.1 * 5¬≤)
    #    = -(0.12 * 4 + 0.1 * 25)
    #    = -(0.48 + 2.5)
    #    = -2.98
    
    cambio = calcular_cambio_salud(planta, ambiente, requerimientos)
    esperado = -(0.12 * 4 + 0.1 * 25)
    assert abs(cambio - esperado) < 0.01, f"Error en f√≥rmula: esperado {esperado}, obtuvo {cambio}"
    
    print(f"  ŒîT = 2.0, ŒîM = 5.0, k_T = 0.12, k_M = 0.1")
    print(f"  ŒîH = -(0.12 * 2¬≤ + 0.1 * 5¬≤) = {cambio:.2f}")
    print("‚úÖ F√≥rmula de da√±o correcta")
    print()


def test_recuperacion_optima():
    """
    REQUISITO: Recuperaci√≥n en condiciones √≥ptimas (+0.5)
    """
    print("üß™ TEST 5: Recuperaci√≥n en Condiciones √ìptimas")
    print("-" * 50)
    
    planta = {
        "id": "TEST01",
        "humedad_suelo": 65.0,  # Dentro del rango √≥ptimo
        "salud": 80.0,
        "estado": "viva"
    }
    ambiente = {
        "temperatura": 27.0,  # Dentro del rango √≥ptimo
        "humedad_relativa": 70.0
    }
    requerimientos = {
        "temperatura_optima": (24, 30),
        "humedad_suelo_optima": (55, 75),
        "k_T": 0.12,
        "k_M": 0.1
    }
    
    cambio = calcular_cambio_salud(planta, ambiente, requerimientos)
    assert cambio == RECUPERACION_SALUD_OPTIMA, f"Error: recuperaci√≥n debe ser {RECUPERACION_SALUD_OPTIMA}, fue {cambio}"
    assert cambio == 0.5, "Error: recuperaci√≥n √≥ptima debe ser +0.5"
    
    print("‚úÖ Recuperaci√≥n √≥ptima correcta (+0.5)")
    print()


def test_costos_acciones():
    """
    REQUISITO: Costos de las Acciones
    - Calefacci√≥n: 5 kWh
    - Ventilaci√≥n: 3 kWh
    - Riego: 1L por cada 10% de humedad
    """
    print("üß™ TEST 6: Costos de Acciones")
    print("-" * 50)
    
    # Verificar constantes
    assert COSTO_CALEFACCION_KWH == 5, "Calefacci√≥n debe costar 5 kWh"
    assert COSTO_VENTILACION_KWH == 3, "Ventilaci√≥n debe costar 3 kWh"
    assert COSTO_RIEGO_LITROS_POR_10_PERCENT == 1, "Riego debe costar 1L por 10%"
    
    # Test costo de riego
    planta = {"humedad_suelo": 40.0}
    requerimientos = {"humedad_suelo_optima": (55, 75)}
    
    # De 40% a 75% = 35% de diferencia = 3.5 litros
    costo = calcular_costo_riego(planta, requerimientos)
    assert costo == 3.5, f"Error: costo de riego debe ser 3.5L, fue {costo}"
    
    print("‚úÖ Costos correctos: Calefacci√≥n=5kWh, Ventilaci√≥n=3kWh, Riego=1L/10%")
    print()


def test_efectos_acciones():
    """
    REQUISITO: Efectos Primarios y Secundarios de Acciones
    """
    print("üß™ TEST 7: Efectos de Acciones")
    print("-" * 50)
    
    # Crear configuraci√≥n de prueba
    config = {
        "recursos_globales": {
            "tanque_agua_litros": 100.0,
            "energia_diaria_kwh": 20.0
        },
        "serres": [
            {
                "nombre": "Test Serre",
                "ambiente": {"temperatura": 25.0, "humedad_relativa": 60.0},
                "especie": "Test",
                "requerimientos": {
                    "temperatura_optima": (20, 30),
                    "humedad_suelo_optima": (50, 70),
                    "k_T": 0.1,
                    "k_M": 0.1
                },
                "plantas": [
                    {"id": "T01", "humedad_suelo": 40.0, "salud": 100.0, "estado": "viva"}
                ]
            }
        ]
    }
    
    # Test Calefacci√≥n
    temp_inicial = config["serres"][0]["ambiente"]["temperatura"]
    hr_inicial = config["serres"][0]["ambiente"]["humedad_relativa"]
    
    exito, msg = ejecutar_calefaccion(config, "Test Serre")
    assert exito, "Calefacci√≥n deber√≠a tener √©xito"
    
    temp_final = config["serres"][0]["ambiente"]["temperatura"]
    hr_final = config["serres"][0]["ambiente"]["humedad_relativa"]
    
    assert temp_final == temp_inicial + EFECTO_CALEFACCION_TEMP, "Efecto primario calefacci√≥n incorrecto"
    assert hr_final == hr_inicial + EFECTO_CALEFACCION_HUMEDAD, "Efecto secundario calefacci√≥n incorrecto"
    
    # Restaurar para test de ventilaci√≥n
    config["serres"][0]["ambiente"]["temperatura"] = 25.0
    config["serres"][0]["ambiente"]["humedad_relativa"] = 60.0
    config["recursos_globales"]["energia_diaria_kwh"] = 20.0
    
    # Test Ventilaci√≥n
    exito, msg = ejecutar_ventilacion(config, "Test Serre")
    assert exito, "Ventilaci√≥n deber√≠a tener √©xito"
    
    temp_final = config["serres"][0]["ambiente"]["temperatura"]
    hr_final = config["serres"][0]["ambiente"]["humedad_relativa"]
    
    assert temp_final == 25.0 + EFECTO_VENTILACION_TEMP, "Efecto primario ventilaci√≥n incorrecto"
    assert hr_final == 60.0 + EFECTO_VENTILACION_HUMEDAD, "Efecto secundario ventilaci√≥n incorrecto"
    
    print("‚úÖ Efectos de acciones correctos:")
    print(f"  Calefacci√≥n: +{EFECTO_CALEFACCION_TEMP}¬∞C, {EFECTO_CALEFACCION_HUMEDAD}% HR")
    print(f"  Ventilaci√≥n: {EFECTO_VENTILACION_TEMP}¬∞C, +{EFECTO_VENTILACION_HUMEDAD}% HR")
    print()


def test_evapotranspiracion():
    """
    REQUISITO: Evapotranspiraci√≥n dependiente de humedad relativa
    - HR < 50%: -6% (aire seco)
    - 50% ‚â§ HR ‚â§ 80%: -4% (normal)
    - HR > 80%: -2% (aire h√∫medo)
    """
    print("üß™ TEST 8: Evapotranspiraci√≥n")
    print("-" * 50)
    
    # Test aire seco (< 50%)
    config_seco = {
        "serres": [{
            "ambiente": {"humedad_relativa": 40.0},
            "plantas": [{"id": "T1", "humedad_suelo": 50.0, "estado": "viva"}]
        }]
    }
    aplicar_evapotranspiracion(config_seco)
    assert config_seco["serres"][0]["plantas"][0]["humedad_suelo"] == 50.0 - 6.0, "Error: aire seco debe ser -6%"
    
    # Test aire normal (50-80%)
    config_normal = {
        "serres": [{
            "ambiente": {"humedad_relativa": 65.0},
            "plantas": [{"id": "T1", "humedad_suelo": 50.0, "estado": "viva"}]
        }]
    }
    aplicar_evapotranspiracion(config_normal)
    assert config_normal["serres"][0]["plantas"][0]["humedad_suelo"] == 50.0 - 4.0, "Error: aire normal debe ser -4%"
    
    # Test aire h√∫medo (> 80%)
    config_humedo = {
        "serres": [{
            "ambiente": {"humedad_relativa": 85.0},
            "plantas": [{"id": "T1", "humedad_suelo": 50.0, "estado": "viva"}]
        }]
    }
    aplicar_evapotranspiracion(config_humedo)
    assert config_humedo["serres"][0]["plantas"][0]["humedad_suelo"] == 50.0 - 2.0, "Error: aire h√∫medo debe ser -2%"
    
    print("‚úÖ Evapotranspiraci√≥n correcta:")
    print(f"  Aire seco (HR<50%): {TASA_EVAPOTRANSPIRACION_AIRE_SECO}%")
    print(f"  Aire normal (50-80%): {TASA_EVAPOTRANSPIRACION_BASE}%")
    print(f"  Aire h√∫medo (HR>80%): {TASA_EVAPOTRANSPIRACION_AIRE_HUMEDO}%")
    print()


def test_validaciones_recursos():
    """
    REQUISITO: Validaci√≥n de recursos antes de ejecutar acciones
    """
    print("üß™ TEST 9: Validaciones de Recursos")
    print("-" * 50)
    
    config = {
        "recursos_globales": {
            "tanque_agua_litros": 1.0,  # Solo 1 litro
            "energia_diaria_kwh": 2.0   # Solo 2 kWh
        },
        "serres": [
            {
                "nombre": "Test Serre",
                "ambiente": {"temperatura": 25.0, "humedad_relativa": 60.0},
                "requerimientos": {
                    "humedad_suelo_optima": (50, 70),
                },
                "plantas": [
                    {"id": "T01", "humedad_suelo": 30.0, "salud": 100.0, "estado": "viva"}
                ]
            }
        ]
    }
    
    # Test: Riego requiere 4L pero solo hay 1L
    exito, msg = ejecutar_riego(config, "T01")
    assert not exito, "Riego deber√≠a fallar por falta de agua"
    assert "agua insuficiente" in msg.lower(), "Mensaje debe indicar falta de agua"
    
    # Test: Calefacci√≥n requiere 5kWh pero solo hay 2kWh
    exito, msg = ejecutar_calefaccion(config, "Test Serre")
    assert not exito, "Calefacci√≥n deber√≠a fallar por falta de energ√≠a"
    assert "energ√≠a insuficiente" in msg.lower() or "sin energ√≠a" in msg.lower(), "Mensaje debe indicar falta de energ√≠a"
    
    print("‚úÖ Validaciones de recursos correctas")
    print()


def test_muerte_planta():
    """
    REQUISITO: Planta cambia a 'muerta' si salud llega a 0 o menos
    """
    print("üß™ TEST 10: Muerte de Plantas")
    print("-" * 50)
    
    planta = {
        "id": "TEST01",
        "humedad_suelo": 10.0,  # Muy baja
        "salud": 1.0,  # Casi muerta
        "estado": "viva"
    }
    ambiente = {
        "temperatura": 40.0,  # Muy caliente
        "humedad_relativa": 20.0
    }
    requerimientos = {
        "temperatura_optima": (20, 30),
        "humedad_suelo_optima": (50, 70),
        "k_T": 0.5,
        "k_M": 0.5
    }
    
    # Esto causar√° gran da√±o
    cambio = calcular_cambio_salud(planta, ambiente, requerimientos)
    assert cambio < 0, "Debe haber da√±o en malas condiciones"
    
    # Actualizar salud
    planta["salud"] = max(0.0, planta["salud"] + cambio)
    
    # Verificar que la salud lleg√≥ a 0
    assert planta["salud"] == 0.0, "Salud debe ser 0"
    
    # En la funci√≥n actualizar_salud_plantas se cambiar√≠a el estado a "muerta"
    if planta["salud"] <= 0.0:
        planta["estado"] = "muerta"
    
    assert planta["estado"] == "muerta", "Estado debe cambiar a 'muerta'"
    
    print("‚úÖ Muerte de planta correcta (salud ‚â§ 0 ‚Üí estado = 'muerta')")
    print()


def test_energia_se_renueva():
    """
    REQUISITO: La energ√≠a se reinicia cada d√≠a (recurso t√°ctico)
    """
    print("üß™ TEST 11: Recurso de Energ√≠a Diaria")
    print("-" * 50)
    
    # Verificar que existe energia_diaria_max_kwh
    config = obtener_configuracion_facil()
    assert "energia_diaria_max_kwh" in config["recursos_globales"], "Debe existir energia_diaria_max_kwh"
    
    max_energia = config["recursos_globales"]["energia_diaria_max_kwh"]
    assert max_energia > 0, "Energ√≠a m√°xima debe ser > 0"
    
    print(f"‚úÖ Energ√≠a diaria se reinicia a {max_energia} kWh cada d√≠a")
    print()


def test_agua_no_se_renueva():
    """
    REQUISITO: El agua NO se reinicia (recurso estrat√©gico)
    """
    print("üß™ TEST 12: Recurso de Agua Estrat√©gico")
    print("-" * 50)
    
    config = obtener_configuracion_facil()
    agua_inicial = config["recursos_globales"]["tanque_agua_litros"]
    
    # Usar agua
    config["serres"][0]["plantas"][0]["humedad_suelo"] = 30.0
    exito, msg = ejecutar_riego(config, "ORQ01")
    
    agua_final = config["recursos_globales"]["tanque_agua_litros"]
    
    assert agua_final < agua_inicial, "El agua debe reducirse al usarla"
    print(f"‚úÖ Agua NO se renueva (recurso estrat√©gico): {agua_inicial}L ‚Üí {agua_final}L")
    print()


def ejecutar_todas_las_pruebas():
    """Ejecuta todas las pruebas y muestra un resumen."""
    print("\n" + "=" * 70)
    print("VERIFICACI√ìN DE SOLUCI√ìN - EXAMEN 3: LAS GRANDES SERRES")
    print("=" * 70 + "\n")
    
    try:
        test_estructura_datos()
        test_desviacion_termica()
        test_desviacion_hidrica()
        test_formula_salud()
        test_recuperacion_optima()
        test_costos_acciones()
        test_efectos_acciones()
        test_evapotranspiracion()
        test_validaciones_recursos()
        test_muerte_planta()
        test_energia_se_renueva()
        test_agua_no_se_renueva()
        
        print("=" * 70)
        print("‚úÖ ‚úÖ ‚úÖ  TODAS LAS PRUEBAS PASARON EXITOSAMENTE  ‚úÖ ‚úÖ ‚úÖ")
        print("=" * 70)
        print("\nüìã VERIFICACI√ìN COMPLETADA:")
        print("‚úÖ Estructura de datos cumple con el enunciado")
        print("‚úÖ C√°lculo de desviaciones correcto")
        print("‚úÖ F√≥rmula de salud ŒîH = -(k_T¬∑ŒîT¬≤ + k_M¬∑ŒîM¬≤) implementada correctamente")
        print("‚úÖ Recuperaci√≥n en condiciones √≥ptimas (+0.5)")
        print("‚úÖ Costos de acciones correctos (Calefacci√≥n=5kWh, Ventilaci√≥n=3kWh, Riego=1L/10%)")
        print("‚úÖ Efectos primarios y secundarios correctos")
        print("‚úÖ Evapotranspiraci√≥n dependiente de humedad relativa")
        print("‚úÖ Validaciones de recursos funcionan")
        print("‚úÖ Muerte de plantas (salud ‚â§ 0)")
        print("‚úÖ Energ√≠a se renueva diariamente (recurso t√°ctico)")
        print("‚úÖ Agua NO se renueva (recurso estrat√©gico)")
        print("\nüéì LA SOLUCI√ìN CUMPLE CON TODOS LOS REQUISITOS DEL ENUNCIADO\n")
        
    except AssertionError as e:
        print("\n" + "=" * 70)
        print("‚ùå ‚ùå ‚ùå  PRUEBA FALLIDA  ‚ùå ‚ùå ‚ùå")
        print("=" * 70)
        print(f"\n‚ùå Error: {e}\n")
        raise


if __name__ == "__main__":
    ejecutar_todas_las_pruebas()
